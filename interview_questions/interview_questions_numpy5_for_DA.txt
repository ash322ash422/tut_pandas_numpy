Hands-on coding tests 
**5 coding exercises with expected outputs**:

---

## Hands-on NumPy Coding Test Questions

### **Q1. Create a NumPy array of integers from 10 to 50 (inclusive), and extract all even numbers.**

```python
import numpy as np

arr = np.arange(10, 51)

mask = (arr % 2 == 0)

even_nums = arr[mask]
print(even_nums)
```

**Expected Output:**

```
[10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50]
```

---

### **Q2. Replace all values greater than 20 in the array `[5, 15, 25, 35, 45]` with `-1`.**

```python
arr = np.array([5, 15, 25, 35, 45])
arr[arr > 20] = -1
print(arr)
```

**Expected Output:**

```
[ 5 15 -1 -1 -1]
```

---

### **Q3. Given two arrays, compute their dot product.**

```python
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

dot_product = np.dot(a, b)
print(dot_product)
```

**Expected Output:**

```
32
```

*(Since 1×4 + 2×5 + 3×6 = 32)*

---

### **Q4. Create a 3×3 matrix with values from 1 to 9 and extract the diagonal elements.**

```python
matrix = np.arange(1, 10).reshape(3, 3)
diag = np.diag(matrix)

print(matrix)
print("Diagonal:", diag)
```

**Expected Output:**

```
[[1 2 3]
 [4 5 6]
 [7 8 9]]
Diagonal: [1 5 9]
```

---

### **Q5. Given an array with some NaN values, replace all NaNs with the mean of the array.**

```python
arr = np.array([10, np.nan, 20, np.nan, 30])

mean_val = np.nanmean(arr)   # Compute mean ignoring NaNs
arr[np.isnan(arr)] = mean_val
print(arr)
```

**Expected Output (approx):**

```
[10. 20. 20. 20. 30.]
```

*(Since mean of \[10, 20, 30] = 20)*

---
